<?php

namespace Chippyash\Test\Validation\Common;

use Chippyash\Type\String\StringType;
use Chippyash\Validation\Common\Lambda;
use Chippyash\Validation\Messenger;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-23 at 08:25:25.
 */
class LambdaTest extends \PHPUnit_Framework_TestCase
{
    public function testIfTheLambdaReturnsTrueThenTheValidatorWillReturnTrue()
    {
        $l1 = new Lambda(function($value)
            {
                return true;
            });
        $this->assertTrue($l1->isValid('foo'));
    }

    public function testIfLamdaReturnsFalseThenDefaultMessageWillBeUsedIfNoneSet()
    {
        $l2 = new Lambda(function($value)
            {
                return false;
            });
        $this->assertFalse($l2->isValid('foo'));
        $this->assertEquals(array(Lambda::ERR_LAMBDA), $l2->getMessages());
    }

    public function testIfLamdaReturnsFalseThenCustomMessageWillBeUsedIfSet()
    {
        $l3 = new Lambda(function($value)
            {
                return false;
            }, new StringType('foo bar'));
        $this->assertFalse($l3->isValid('foo'));
        $this->assertEquals(array('foo bar'), $l3->getMessages());    
    }
    
    public function testYouCanAccessTheMessengerFromWithinACallableFunction()
    {
        $l4 = new Lambda(function($value, Messenger $messenger)
            {
                $messenger->add(new StringType('foo bar'));
                return false;
            });
        $this->assertFalse($l4->isValid('foo'));
        $this->assertEquals(array('foo bar','Validation for lambda function failed'), $l4->getMessages());         
    }
}
