<?php

namespace Chippyash\Test\Validation\Common;

use Chippyash\Validation\Common\ZFValidator as ZendBaseValidator;
use Chippyash\Validation\Messenger;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-08 at 19:09:41.
 */
class ZendTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Default set of validators
     *
     * @var array
     */
    /**
     * a set of validators
     *
     * @var array
     */
    protected $invokableClasses = array(
        'alnum'                    => 'Zend\I18n\Validator\Alnum',
        'alpha'                    => 'Zend\I18n\Validator\Alpha',
        'barcode'                  => 'Zend\Validator\Barcode',
        'between'                  => 'Zend\Validator\Between',
        'float'                    => 'Zend\I18n\Validator\IsFloat',
        'int'                      => 'Zend\I18n\Validator\IsInt',
        'postcode'                 => 'Zend\I18n\Validator\PostCode',
    );

    /**
     * @var Messenger
     */
    protected $messenger;

    public function setUp()
    {
        $this->messenger = new Messenger();
    }

    /**
     * @dataProvider zendValidators
     * @requires extension intl
     */
    public function testWillReturnCorrectResponseForTestDataSetViaMagicInvokeMethod($baseName, $constructParams, $trueValue, $falseValue)
    {
        $className = $this->invokableClasses[$baseName];
        $object = new ZendBaseValidator(new $className($constructParams));
        $this->assertTrue($object($trueValue, $this->messenger));
        $this->assertFalse($object($falseValue, $this->messenger));
    }

    /**
     * @dataProvider zendValidators
     * @requires extension intl
     */
    public function testWillReturnCorrectResponseForTestDataSetViaIsValidMethod($baseName, $constructParams, $trueValue, $falseValue)
    {
        $className = $this->invokableClasses[$baseName];
        $object = new ZendBaseValidator(new $className($constructParams));
        $this->assertTrue($object->isValid($trueValue));
        $this->assertFalse($object->isValid($falseValue));
    }

    public function testYouCanGetTheUnderlyingZendErrorMessages()
    {
        $object = new ZendBaseValidator(new \Zend\I18n\Validator\Alnum());
        $this->assertFalse($object->isValid(''));
        $this->assertEquals(array('The input is an empty string'), $object->getMessages());
    }

    /**
     * Tests of Zend validators
     * We are not testing all of them!
     *
     */
    public function zendValidators()
    {
        return array(
            array('alnum', false,'hw1234',''),
            array('alpha', null,'abcd','1234'),
            array('barcode', array('adapter'=> 'Code25interleaved'),'1234567895','HHHHHH'),
            array('between', array('min'=>2,'max'=>5),3,6),
            array('float', array(),'1234.56','ah67.3'),
            array('int', array(),'12345','1d456'),
            array('postcode', array('locale'=>'en-GB'),'NN10 6AG','ZZ2 FY1'),
        );
    }
}
