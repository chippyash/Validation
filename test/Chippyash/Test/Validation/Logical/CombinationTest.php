<?php

namespace Chippyash\Test\Validation\Logical;

use Chippyash\Validation\Pattern\ValidatorPatternInterface;
use Chippyash\Validation\Messenger;
use Chippyash\Validation\Logical\LAnd;
use Chippyash\Validation\Logical\LOr;
use Chippyash\Validation\Logical\LXor;
use Chippyash\Validation\Logical\LNot;
use PHPUnit\Framework\TestCase;

class testValidatorTrue implements ValidatorPatternInterface{
    public function __invoke($value, Messenger $messenger) {return true;}
    public function isValid($value){return true;}
    public function getMessages(){}
}
class testValidatorFalse implements ValidatorPatternInterface{
    public function __invoke($value, Messenger $messenger) {return false;}
    public function isValid($value){return false;}
    public function getMessages(){}
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-20 at 16:38:44.
 */
class CombinationTest extends TestCase {

    protected $true;
    protected $false;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void {
        $this->true = new testValidatorTrue();
        $this->false = new testValidatorFalse();
    }

    public function testCombinationsOfTheLogicalValidatorsWorkCorrectly()
    {
        //a AND (b OR c)
        $test = new LAnd($this->true, new LOr($this->true, $this->false));
        $this->assertTrue($test->isValid('foo'));
        $test = new LAnd($this->true, new LOr($this->false, $this->true));
        $this->assertTrue($test->isValid('foo'));
        $test = new LAnd($this->true, new LOr($this->true, $this->true));
        $this->assertTrue($test->isValid('foo'));
        $test = new LAnd($this->true, new LOr($this->false, $this->false));
        $this->assertFalse($test->isValid('foo'));

        $test = new LAnd($this->false, new LOr($this->true, $this->false));
        $this->assertFalse($test->isValid('foo'));
        $test = new LAnd($this->false, new LOr($this->false, $this->true));
        $this->assertFalse($test->isValid('foo'));
        $test = new LAnd($this->false, new LOr($this->true, $this->true));
        $this->assertFalse($test->isValid('foo'));
        $test = new LAnd($this->false, new LOr($this->false, $this->false));
        $this->assertFalse($test->isValid('foo'));

        //(a AND b) OR c
        $test = new Lor(new LAnd($this->true, $this->true), $this->true);
        $this->assertTrue($test->isValid('foo'));
        $test = new Lor(new LAnd($this->false, $this->true), $this->true);
        $this->assertTrue($test->isValid('foo'));
        $test = new Lor(new LAnd($this->true, $this->false), $this->true);
        $this->assertTrue($test->isValid('foo'));
        $test = new Lor(new LAnd($this->false, $this->false), $this->true);
        $this->assertTrue($test->isValid('foo'));

        $test = new Lor(new LAnd($this->true, $this->true), $this->false);
        $this->assertTrue($test->isValid('foo'));
        $test = new Lor(new LAnd($this->false, $this->true), $this->false);
        $this->assertFalse($test->isValid('foo'));
        $test = new Lor(new LAnd($this->true, $this->false), $this->false);
        $this->assertFalse($test->isValid('foo'));
        $test = new Lor(new LAnd($this->false, $this->false), $this->false);
        $this->assertFalse($test->isValid('foo'));

        //a AND (b XOR c)
        $test = new LAnd($this->true, new LXor($this->true, $this->false));
        $this->assertTrue($test->isValid('foo'));
        $test = new LAnd($this->true, new LXor($this->false, $this->true));
        $this->assertTrue($test->isValid('foo'));
        $test = new LAnd($this->true, new LXor($this->true, $this->true));
        $this->assertFalse($test->isValid('foo'));
        $test = new LAnd($this->true, new LXor($this->false, $this->false));
        $this->assertFalse($test->isValid('foo'));

        $test = new LAnd($this->false, new LXor($this->true, $this->false));
        $this->assertFalse($test->isValid('foo'));
        $test = new LAnd($this->false, new LXor($this->false, $this->true));
        $this->assertFalse($test->isValid('foo'));
        $test = new LAnd($this->false, new LXor($this->true, $this->true));
        $this->assertFalse($test->isValid('foo'));
        $test = new LAnd($this->false, new LXor($this->false, $this->false));
        $this->assertFalse($test->isValid('foo'));

        //(a AND b) XOR c
        $test = new LXor(new LAnd($this->true, $this->true), $this->true);
        $this->assertFalse($test->isValid('foo'));
        $test = new LXor(new LAnd($this->false, $this->true), $this->true);
        $this->assertTrue($test->isValid('foo'));
        $test = new LXor(new LAnd($this->true, $this->false), $this->true);
        $this->assertTrue($test->isValid('foo'));
        $test = new LXor(new LAnd($this->false, $this->false), $this->true);
        $this->assertTrue($test->isValid('foo'));

        $test = new LXor(new LAnd($this->true, $this->true), $this->false);
        $this->assertTrue($test->isValid('foo'));
        $test = new LXor(new LAnd($this->false, $this->true), $this->false);
        $this->assertFalse($test->isValid('foo'));
        $test = new LXor(new LAnd($this->true, $this->false), $this->false);
        $this->assertFalse($test->isValid('foo'));
        $test = new LXor(new LAnd($this->false, $this->false), $this->false);
        $this->assertFalse($test->isValid('foo'));


        //using not
        //NOT (a AND (b OR c))
        $test = new LAnd($this->true, new LOr($this->true, $this->false));
        $not = new LNot($test);
        $this->assertFalse($not->isValid('foo'));
        $test = new LAnd($this->true, new LOr($this->false, $this->true));
        $not = new LNot($test);
        $this->assertFalse($not->isValid('foo'));
        $test = new LAnd($this->true, new LOr($this->true, $this->true));
        $not = new LNot($test);
        $this->assertFalse($not->isValid('foo'));
        $test = new LAnd($this->true, new LOr($this->false, $this->false));
        $not = new LNot($test);
        $this->assertTrue($not->isValid('foo'));

        $test = new LAnd($this->false, new LOr($this->true, $this->false));
        $not = new LNot($test);
        $this->assertTrue($not->isValid('foo'));
        $test = new LAnd($this->false, new LOr($this->false, $this->true));
        $not = new LNot($test);
        $this->assertTrue($not->isValid('foo'));
        $test = new LAnd($this->false, new LOr($this->true, $this->true));
        $not = new LNot($test);
        $this->assertTrue($not->isValid('foo'));
        $test = new LAnd($this->false, new LOr($this->false, $this->false));
        $not = new LNot($test);
        $this->assertTrue($not->isValid('foo'));

        //NOT ((a AND b) OR c)
        $test = new Lor(new LAnd($this->true, $this->true), $this->true);
        $not = new LNot($test);
        $this->assertFalse($not->isValid('foo'));
        $test = new Lor(new LAnd($this->false, $this->true), $this->true);
        $not = new LNot($test);
        $this->assertFalse($not->isValid('foo'));
        $test = new Lor(new LAnd($this->true, $this->false), $this->true);
        $not = new LNot($test);
        $this->assertFalse($not->isValid('foo'));
        $test = new Lor(new LAnd($this->false, $this->false), $this->true);
        $not = new LNot($test);
        $this->assertFalse($not->isValid('foo'));

        $test = new Lor(new LAnd($this->true, $this->true), $this->false);
        $not = new LNot($test);
        $this->assertFalse($not->isValid('foo'));
        $test = new Lor(new LAnd($this->false, $this->true), $this->false);
        $not = new LNot($test);
        $this->assertTrue($not->isValid('foo'));
        $test = new Lor(new LAnd($this->true, $this->false), $this->false);
        $not = new LNot($test);
        $this->assertTrue($not->isValid('foo'));
        $test = new Lor(new LAnd($this->false, $this->false), $this->false);
        $not = new LNot($test);
        $this->assertTrue($not->isValid('foo'));

        //NOT (a AND (b XOR c))
        $test = new LAnd($this->true, new LXor($this->true, $this->false));
        $not = new LNot($test);
        $this->assertFalse($not->isValid('foo'));
        $test = new LAnd($this->true, new LXor($this->false, $this->true));
        $not = new LNot($test);
        $this->assertFalse($not->isValid('foo'));
        $test = new LAnd($this->true, new LXor($this->true, $this->true));
        $not = new LNot($test);
        $this->assertTrue($not->isValid('foo'));
        $test = new LAnd($this->true, new LXor($this->false, $this->false));
        $not = new LNot($test);
        $this->assertTrue($not->isValid('foo'));

        $test = new LAnd($this->false, new LXor($this->true, $this->false));
        $not = new LNot($test);
        $this->assertTrue($not->isValid('foo'));
        $test = new LAnd($this->false, new LXor($this->false, $this->true));
        $not = new LNot($test);
        $this->assertTrue($not->isValid('foo'));
        $test = new LAnd($this->false, new LXor($this->true, $this->true));
        $not = new LNot($test);
        $this->assertTrue($not->isValid('foo'));
        $test = new LAnd($this->false, new LXor($this->false, $this->false));
        $not = new LNot($test);
        $this->assertTrue($not->isValid('foo'));

        //NOT ((a AND b) XOR c)
        $test = new LXor(new LAnd($this->true, $this->true), $this->true);
        $not = new LNot($test);
        $this->assertTrue($not->isValid('foo'));
        $test = new LXor(new LAnd($this->false, $this->true), $this->true);
        $not = new LNot($test);
        $this->assertFalse($not->isValid('foo'));
        $test = new LXor(new LAnd($this->true, $this->false), $this->true);
        $not = new LNot($test);
        $this->assertFalse($not->isValid('foo'));
        $test = new LXor(new LAnd($this->false, $this->false), $this->true);
        $not = new LNot($test);
        $this->assertFalse($not->isValid('foo'));

        $test = new LXor(new LAnd($this->true, $this->true), $this->false);
        $not = new LNot($test);
        $this->assertFalse($not->isValid('foo'));
        $test = new LXor(new LAnd($this->false, $this->true), $this->false);
        $not = new LNot($test);
        $this->assertTrue($not->isValid('foo'));
        $test = new LXor(new LAnd($this->true, $this->false), $this->false);
        $not = new LNot($test);
        $this->assertTrue($not->isValid('foo'));
        $test = new LXor(new LAnd($this->false, $this->false), $this->false);
        $not = new LNot($test);
        $this->assertTrue($not->isValid('foo'));

        //feel free to add other combinations if you are bored!
    }
}
